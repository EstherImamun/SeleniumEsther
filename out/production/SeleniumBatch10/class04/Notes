Xpath

Element of Commands:

1.  .clear
2.  .getText()
3.  .getAttribute()

---------------------------------------CSS----------------------------------------------------------

1. get an element using CSS selector
   a.  syntax:
      tag-name[attribute='attribute value']

      the beauty about CSS selector is that instead of writing the full syntax you can also use shortcuts

      Example;
      instead of using..

      classname ---> tag-name[classname='value'], you can write "tag-name.value" ---> .
      ID        ---> tag-name[id="value"],      you can write "tag-name#value"  ---> #

Note:

    In css selector we do not have the option of getting an element by Text

    but CSS has this contains method that can be used

    Syntax: for contains method for css
      tag-name[attribute *= 'partial attribute value'] where * means contains here
 CSS has some other amazing features too like
    A.  starts-with method in css:
        syntax:  tag-name[attribute ^= 'starting attribute value'] where ^ means starts with

        example: <input id="abra ca dabra hello", email="rote"/>

                 input[id ^='abra ca dab']

    B.  ends-with method in css:
           $ symbol represents ends-with method in css
           Syntax:
              tag-name[attribute $='ending attribute value']

         example: <input id="abra ca dabra hello", email="rote"/>

         write the CSS selector using ends-with method:

         input[id $='hello']
-----------------------------------------------------------------------------------------------


Approach to select the radio button:

1. locate the webElement in the DOM
2. write the appropriate locator to select it
3. use driver.findElement to find that in your code
4. click on it


isEnabled()--> check if the radio button can be selected or not (if not selectable usually it is greyed out.)
isDisplayed()--> checks if the webElement is displayed on the page or not
isSelected()--> checks if the radio button is selected or not (return true if selected)



---------------------------Revision--------------------------------------------------------------------------

1. Locators:

8 Locators:

1. id
2. name
3. className
4. partial Link Text
5. link text
6. css
7. Xpath
8. Tad-name

syntax for Xpath is :
    //tag-name[@attribute='value']


WebElement Commands:
1.  .clear()
2.  .getText()--->get the text
3.  getAttribute() --> get the value of a particular attribute
4.  isSelected()--> to check if the element is checked (clicked) or not
5.  isDisplayed()--> is it there on the screen or not
6.  isEnabled()--> is it clickable or are we able to send text to it in-case of a text box


Radio buttons:

select a radio button

approach:

1.  open the DOM and inspect it
2.  write down the correct locator that will select it
3.  find that using driver.findElement in your code
4.  just simply click on it


Logic building

a scenario:

let's assume there are 4 radio buttons and you want to select the one that says "5 - 15"

1.  inspect the radio button that you want to select i.e "5 - 15"
2.  write down the correct locator that selects the webElement "5 - 15"
3.  find the webElement using driver.finElement through code
4.  just simply click on it

is this a very good approach????
NO it is not a very good approach because in future if we want to select 0 - 15
or any other value it will be a hassle

so what's the better approach?

1. inspect the webElement of interest (4 radio buttons) and find in the DOM
2. write the locator in such a way that it selects all those 4 radio buttons
3. find all those elements in the code using driver.findElements
4. loop through the list and get each webElement one by one
5. whenever we are iterating, figure out which attribute might help you in detecting if it is your desired one
   (by inspecting the webElements in DOM)
6. if you get your desired webElement value, use if else condition to  click on it.




































